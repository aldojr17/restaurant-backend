// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "final-project-backend/domain"

	mock "github.com/stretchr/testify/mock"

	util "final-project-backend/util"
)

// MenuService is an autogenerated mock type for the MenuService type
type MenuService struct {
	mock.Mock
}

// CreateMenu provides a mock function with given fields: menu
func (_m *MenuService) CreateMenu(menu *domain.MenuPayload) *domain.Response {
	ret := _m.Called(menu)

	var r0 *domain.Response
	if rf, ok := ret.Get(0).(func(*domain.MenuPayload) *domain.Response); ok {
		r0 = rf(menu)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	return r0
}

// DeleteMenu provides a mock function with given fields: menu_id
func (_m *MenuService) DeleteMenu(menu_id int) *domain.Response {
	ret := _m.Called(menu_id)

	var r0 *domain.Response
	if rf, ok := ret.Get(0).(func(int) *domain.Response); ok {
		r0 = rf(menu_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	return r0
}

// GetAllMenus provides a mock function with given fields: pageable
func (_m *MenuService) GetAllMenus(pageable util.Pageable) (*util.Page, error) {
	ret := _m.Called(pageable)

	var r0 *util.Page
	if rf, ok := ret.Get(0).(func(util.Pageable) *util.Page); ok {
		r0 = rf(pageable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.Page)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(util.Pageable) error); ok {
		r1 = rf(pageable)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMenuDetail provides a mock function with given fields: menu_id
func (_m *MenuService) GetMenuDetail(menu_id int) *domain.Response {
	ret := _m.Called(menu_id)

	var r0 *domain.Response
	if rf, ok := ret.Get(0).(func(int) *domain.Response); ok {
		r0 = rf(menu_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	return r0
}

// UpdateMenu provides a mock function with given fields: menu, menu_id
func (_m *MenuService) UpdateMenu(menu *domain.MenuPayload, menu_id int) *domain.Response {
	ret := _m.Called(menu, menu_id)

	var r0 *domain.Response
	if rf, ok := ret.Get(0).(func(*domain.MenuPayload, int) *domain.Response); ok {
		r0 = rf(menu, menu_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	return r0
}

type mockConstructorTestingTNewMenuService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenuService creates a new instance of MenuService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenuService(t mockConstructorTestingTNewMenuService) *MenuService {
	mock := &MenuService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
